{
 "vulnerabilities": {
  "callstack": [], 
  "time_dependency": [], 
  "reentrancy": [], 
  "integer_overflow": [
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:633:2: Warning: Integer Overflow.\n\tfunction reissueCert(bytes32 revokeCertHash, bytes revokeSigCertHash, bytes32 revokeMerkleHash, uint revocationDate, bytes32 registerCertHash, bytes registerSig, uint registrationDate) public {\r\n\t^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    revokeSigCertHash = 115792089237316195423570985008687907853269984665640564039457584007913129639932", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:163:3: Warning: Integer Overflow.\n\t\taccessList[userAddr].date\nInteger Overflow occurs if:\n    accessRight = 1809251394333065553493296640760748560207343510400633813116524750123642650624\n    owner = 0", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:581:8: Warning: Integer Overflow.\n\t\t\tif (idMap[id][i]\nInteger Overflow occurs if:\n    accessList[user].accessRight = 1\n    idMap[id].length = 28948022309329048855892746252171976963317496166410141009864396001978282409984\n    idMap[id][i].exists = 0\n    accessList[user].isValue = 255", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:489:38: Warning: Integer Overflow.\n\t\t\tif (revoked[merkleHash].exists && revoked[merkleHash].batchFlag\nInteger Overflow occurs if:\n    accessList[user].accessRight = 1\n    revoked[merkleHash].exists = 255\n    merkleHash = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    revoked[certHash].exists = 0\n    accessList[user].isValue = 255", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:505:7: Warning: Integer Overflow.\n\t\tif (hashes[tmpCertHash].exists\nInteger Overflow occurs if:\n    accessList[user].accessRight = 1\n    revoked[certHash].exists = 0\n    accessList[user].isValue = 255\n    merkleHash = 0", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:479:36: Warning: Integer Overflow.\n\t\tif (revoked[certHash].exists && !revoked[certHash].batchFlag\nInteger Overflow occurs if:\n    accessList[user].accessRight = 1\n    revoked[certHash].exists = 255\n    accessList[user].isValue = 255", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:613:2: Warning: Integer Overflow.\n\tfunction revokeCert(bytes32 certHash, bytes sigCertHash, bytes32 merkleHash, bool batchFlag, uint revocationDate) public {\r\n\t^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    sigCertHash = 115792089237316195423570985008687907853269984665640564039457584007913129639935", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:581:39: Warning: Integer Overflow.\n\t\t\tif (idMap[id][i].exists == true && idMap[id][i]\nInteger Overflow occurs if:\n    accessList[user].accessRight = 1\n    idMap[id].length = 57896044618658097711785492504343953926634992332820282019728792003956564819968\n    idMap[id][i].exists = 255\n    idMap[id][i].exists = 0\n    idMap[id][i].exists = 0\n    idMap[id][i].exists = 0\n    idMap[id][i].exists = 0\n    accessList[user].isValue = 255", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:165:3: Warning: Integer Overflow.\n\t\taccessList[userAddr].isValue\nInteger Overflow occurs if:\n    accessRight = 1809251394333065553493296640760748560207343510400633813116524750123642650624\n    owner = 0", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:581:8: Warning: Integer Overflow.\n\t\t\tif (idMap[id][i].exists\nInteger Overflow occurs if:\n    accessList[user].accessRight = 1\n    idMap[id].length = 115792089237316195423570985008687907853269984665640564039457584007913129639935\n    accessList[user].isValue = 255", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:581:39: Warning: Integer Overflow.\n\t\t\tif (idMap[id][i].exists == true && idMap[id][i].certhash\nInteger Overflow occurs if:\n    accessList[user].accessRight = 1\n    idMap[id].length = 57896044618658097711785492504343953926634992332820282019728792003956564819968\n    idMap[id][i].exists = 255\n    idMap[id][i].exists = 0\n    idMap[id][i].exists = 0\n    idMap[id][i].exists = 0\n    idMap[id][i].exists = 0\n    accessList[user].isValue = 255", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:677:2: Warning: Integer Overflow.\n\tfunction reissueCertWithID(bytes32 revokeCertHash, bytes revokeSigCertHash, bytes32 revokeMerkleHash, uint revocationDate, bytes32 registerCertHash, bytes registerSig, bytes32 registerMerkleHash, uint registrationDate, bytes32 id) public {\r\n\t^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    revokeSigCertHash = 115792089237316195423570985008687907853269984665640564039457584007913129639935", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:175:7: Warning: Integer Overflow.\n\t\tif (accessList[user].isValue", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:451:2: Warning: Integer Overflow.\n\tfunction registerCertWithID(bytes32 certHash, bytes sig, bytes32 merkleHash, uint registrationDate, bytes32 id) public {\r\n\t^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    sig = 115792089237316195423570985008687907853269984665640564039457584007913129639935", 
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:433:2: Warning: Integer Overflow.\n\tfunction registerCert(bytes32 certHash, bytes sig, uint registrationDate) public {\t\t\r\n\t^\nSpanning multiple lines.\nInteger Overflow occurs if:\n    sig = 115792089237316195423570985008687907853269984665640564039457584007913129639935"
  ], 
  "parity_multisig_bug_2": [], 
  "integer_underflow": [
   "./uniqueContractSourceCode/0x2Fb3C22230c39496eDc13c16d09F34368346Ac1D.txt:507:8: Warning: Integer Underflow.\n\t\t\tif (recoverAddr(tmpCertHash, hashes[tmpCertHash].sig)\nInteger Underflow occurs if:\n    accessList[user].accessRight = 1\n    hashes[tmpCertHash].exists = 255\n    revoked[certHash].exists = 0\n    accessList[user].isValue = 255\n    merkleHash = 0"
  ], 
  "money_concurrency": [], 
  "assertion_failure": []
 }, 
 "evm_code_coverage": "30.6"
}